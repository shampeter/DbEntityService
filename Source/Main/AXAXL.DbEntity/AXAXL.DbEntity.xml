<?xml version="1.0"?>
<doc>
    <assembly>
        <name>AXAXL.DbEntity</name>
    </assembly>
    <members>
        <member name="T:AXAXL.DbEntity.EntityGraph.EntityGraphExtensions">
            <summary>
            Shortcut that works on objects from AXAXL.DbEntity.EntityGraph namespace.
            </summary>
        </member>
        <member name="T:AXAXL.DbEntity.EntityGraph.ExtensionsForHandlingAnnotations">
            <summary>
            Shortcuts to everything concerning custom attributes or attributes from System.ComponentModel.
            </summary>
        </member>
        <member name="T:AXAXL.DbEntity.Extensions.GeneralExtensions">
            <summary>
            Provide shortcuts to general functionalities which does not requires any dependency on AXAXL.DbEntity namespace.
            </summary>
        </member>
        <member name="T:AXAXL.DbEntity.Interfaces.IChangeSet">
            <summary>
            This is an interface to group changes together with respect to transaction scope option (such as Required, RequiredNew, Suppress) and isolation level,
            like ReadCommitted, Serializable etc.
            </summary>
        </member>
        <member name="M:AXAXL.DbEntity.Interfaces.IChangeSet.Insert(AXAXL.DbEntity.Interfaces.ITrackable[])">
            <summary>
            Insert an array of entities into the database.  All are assumed to be new without regarding to the <seealso cref="P:AXAXL.DbEntity.Interfaces.ITrackable.EntityStatus"/> of each entity.
            </summary>
            <param name="entities">array of entities</param>
            <returns>Return itself for chaining method calls.</returns>
        </member>
        <member name="M:AXAXL.DbEntity.Interfaces.IChangeSet.Update(AXAXL.DbEntity.Interfaces.ITrackable[])">
            <summary>
            Update an array of entities in the database.  All are assumed to being updated without regarding to the <seealso cref="P:AXAXL.DbEntity.Interfaces.ITrackable.EntityStatus"/> of each entity.
            </summary>
            <param name="entities">array of entities</param>
            <returns>Return itself for chaining method calls.</returns>
        </member>
        <member name="M:AXAXL.DbEntity.Interfaces.IChangeSet.Delete(AXAXL.DbEntity.Interfaces.ITrackable[])">
            <summary>
            Delete an array of entities from the database.  All are assumed to be deleted without regarding to the <seealso cref="P:AXAXL.DbEntity.Interfaces.ITrackable.EntityStatus"/> of each entity.
            </summary>
            <param name="entities">array of entities</param>
            <returns>Return itself for chaining method calls.</returns>
        </member>
        <member name="M:AXAXL.DbEntity.Interfaces.IChangeSet.Save(AXAXL.DbEntity.Interfaces.ITrackable[])">
            <summary>
            Submit an array of entities to be saved.  No change made to database yet.  What needs to be done depends on the <seealso cref="P:AXAXL.DbEntity.Interfaces.ITrackable.EntityStatus"/> of each entity.
            </summary>
            <param name="entities">array of entity</param>
            <returns>Return itself for chaining method calls.</returns>
        </member>
        <member name="M:AXAXL.DbEntity.Interfaces.IChangeSet.SetTransactionScopeOption(System.Transactions.TransactionScopeOption)">
            <summary>
            Assign transaction scope to this change set. If none is assigned, change set will use the root transaction scope specified in <see cref="T:AXAXL.DbEntity.Interfaces.IPersist"/>
            </summary>
            <param name="option">transaction scope option</param>
            <returns>Return itself for chaining method calls.</returns>
        </member>
        <member name="M:AXAXL.DbEntity.Interfaces.IChangeSet.SetIsolationLevel(System.Transactions.IsolationLevel)">
            <summary>
            Assign isolation level to this change set. If none is assigned, change set will use the root transaction isolation level specified in <see cref="T:AXAXL.DbEntity.Interfaces.IPersist"/>
            </summary>
            <param name="isolationLevel"></param>
            <returns>Return itself for chaining method calls.</returns>
        </member>
        <member name="M:AXAXL.DbEntity.Interfaces.IChangeSet.Exclude``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])">
            <summary>
            To skip childsets.  Childset of the skipped childset will not be included in this change set also.
            </summary>
            <typeparam name="TObject">Entity object</typeparam>
            <param name="exclusions">Lambda express which idenntify a property in <typeparamref name="TObject"/> that is referencing a childset.</param>
            <returns>Return itself for chaining method calls.</returns>
        </member>
        <member name="P:AXAXL.DbEntity.Interfaces.IChangeSet.ScopeOption">
            <summary>
            Return transaction scope assigned.  
            Be reminded that it can be just the default value of enum <see cref="T:System.Transactions.TransactionScopeOption"/> if <see cref="M:AXAXL.DbEntity.Interfaces.IChangeSet.SetTransactionScopeOption(System.Transactions.TransactionScopeOption)"/> is not called.
            Must check <see cref="P:AXAXL.DbEntity.Interfaces.IChangeSet.IsTransactionScopeOptionChanged"/> to see if <see cref="M:AXAXL.DbEntity.Interfaces.IChangeSet.SetTransactionScopeOption(System.Transactions.TransactionScopeOption)"/> is called.
            </summary>
        </member>
        <member name="P:AXAXL.DbEntity.Interfaces.IChangeSet.Isolation">
            <summary>
            Return isolation level assigned.
            Be reminded that it can be just the default value of enum <see cref="T:System.Transactions.IsolationLevel"/> if <see cref="M:AXAXL.DbEntity.Interfaces.IChangeSet.SetIsolationLevel(System.Transactions.IsolationLevel)"/> has not been used.
            Must check <see cref="P:AXAXL.DbEntity.Interfaces.IChangeSet.IsIsolationLevelChanged"/> to see if <see cref="M:AXAXL.DbEntity.Interfaces.IChangeSet.SetIsolationLevel(System.Transactions.IsolationLevel)"/> is called.
            </summary>
        </member>
        <member name="P:AXAXL.DbEntity.Interfaces.IChangeSet.Exclusion">
            <summary>
            Compiled version of <see cref="M:AXAXL.DbEntity.Interfaces.IChangeSet.Exclude``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])"/> which identify which <see cref="T:AXAXL.DbEntity.EntityGraph.Node"/> and from such which <see cref="T:AXAXL.DbEntity.EntityGraph.NodeProperty"/> is identified as excluded.
            </summary>
        </member>
        <member name="P:AXAXL.DbEntity.Interfaces.IChangeSet.Changes">
            <summary>
            Return all entities submitted to this change set via <see cref="M:AXAXL.DbEntity.Interfaces.IChangeSet.Save(AXAXL.DbEntity.Interfaces.ITrackable[])"/>
            </summary>
        </member>
        <member name="P:AXAXL.DbEntity.Interfaces.IChangeSet.IsTransactionScopeOptionChanged">
            <summary>
            Return true if <see cref="M:AXAXL.DbEntity.Interfaces.IChangeSet.SetTransactionScopeOption(System.Transactions.TransactionScopeOption)"/> has been called to setup <see cref="T:System.Transactions.TransactionScopeOption"/> for this change set.
            </summary>
        </member>
        <member name="P:AXAXL.DbEntity.Interfaces.IChangeSet.IsIsolationLevelChanged">
            <summary>
            Return true if <see cref="M:AXAXL.DbEntity.Interfaces.IChangeSet.SetIsolationLevel(System.Transactions.IsolationLevel)"/> has been called to assigne <see cref="T:System.Transactions.IsolationLevel"/> to this change set.
            </summary>
        </member>
        <member name="M:AXAXL.DbEntity.Interfaces.IDatabaseDriver.Insert``1(System.String,``0,AXAXL.DbEntity.EntityGraph.Node)">
            <summary>
            Insert a data row represented by the entity class into database.  The entity object is required to implement <see cref="T:AXAXL.DbEntity.Interfaces.ITrackable"/>.
            </summary>
            <typeparam name="T">Entity object class type</typeparam>
            <param name="connectionString">Database connection string.</param>
            <param name="entity">Business entity object to be inserted.</param>
            <param name="node">The <see cref="T:AXAXL.DbEntity.EntityGraph.Node"/> representing the meta data and object-to-relational database mapping of the entity class.</param>
            <returns>Entity object which contains updated data after insert.</returns>
        </member>
        <member name="M:AXAXL.DbEntity.Interfaces.IDatabaseDriver.Delete``1(System.String,``0,AXAXL.DbEntity.EntityGraph.Node)">
            <summary>
            Delete the data row corresponding to this input entity class.  Entity object is required to implement <see cref="T:AXAXL.DbEntity.Interfaces.ITrackable"/>.
            </summary>
            <typeparam name="T">Entity object class type</typeparam>
            <param name="connectionString">Database connection string.</param>
            <param name="entity">Business entity object to be deleted.</param>
            <param name="node">The <see cref="T:AXAXL.DbEntity.EntityGraph.Node"/> representing the meta data and object-to-relational database mapping of the entity class.</param>
            <returns>Entity object has been deleted.</returns>
        </member>
        <member name="M:AXAXL.DbEntity.Interfaces.IDatabaseDriver.Update``1(System.String,``0,AXAXL.DbEntity.EntityGraph.Node)">
            <summary>
            
            </summary>
            <typeparam name="T">Entity object class type</typeparam>
            <param name="connectionString">Database connection string.</param>
            <param name="entity">Business entity object to be updated.</param>
            <param name="node">The <see cref="T:AXAXL.DbEntity.EntityGraph.Node"/> representing the meta data and object-to-relational database mapping of the entity class.</param>
            <returns>Entity object which contains updated data after update.</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:AXAXL.DbEntity.Interfaces.IDatabaseDriver.Select``1(System.String,AXAXL.DbEntity.EntityGraph.Node,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}}},System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}}[]},System.Int32,System.ValueTuple{AXAXL.DbEntity.EntityGraph.NodeProperty,System.Boolean}[],System.Int32)" -->
        <member name="M:AXAXL.DbEntity.Interfaces.IDatabaseDriver.Select``1(System.String,AXAXL.DbEntity.EntityGraph.Node,System.Collections.Generic.IDictionary{System.String,System.Object},System.Int32)">
            <summary>
            Select entity object into <see cref="T:System.Collections.Generic.IEnumerable`1"/> using the <paramref name="parameters"/> dictionary for the where clause.
            </summary>
            <typeparam name="T">Entity object type</typeparam>
            <param name="connectionString">Database connection string</param>
            <param name="node">The <see cref="T:AXAXL.DbEntity.EntityGraph.Node"/> representing the meta data and object-to-relational database mapping of the entity class.</param>
            <param name="parameters">Dictionary of name to value representing the where condition, assuming AND operation on all key-value pairs.</param>
            <param name="timeoutDurationInSeconds">Timeout setting for this query.  Default is 30 seconds.</param>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/> of entity object.</returns>
        </member>
        <member name="M:AXAXL.DbEntity.Interfaces.IDatabaseDriver.Select``1(System.String,AXAXL.DbEntity.EntityGraph.Node,System.Collections.Generic.IDictionary{System.String,System.Object},System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression},System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression[]},System.Int32)">
            <summary>
            Select entity object into <see cref="T:System.Collections.Generic.IEnumerable`1"/> using the <paramref name="parameters"/> dictionary for the where clause.
            </summary>
            <typeparam name="T">Entity object type</typeparam>
            <param name="connectionString">Database connection string</param>
            <param name="node">The <see cref="T:AXAXL.DbEntity.EntityGraph.Node"/> representing the meta data and object-to-relational database mapping of the entity class.</param>
            <param name="parameters">Dictionary of name to value representing the where condition, assuming AND operation on all key-value pairs.</param>
            <param name="whereClauses">Additonal where clause in addition to the <paramref name="parameters"/></param>
            <param name="orClausesGroup">Additional or clauses in addition to the <paramref name="parameters"/></param>
            <param name="timeoutDurationInSeconds">Timeout setting for this query.  Default is 30 seconds.</param>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/> of entity object.</returns>
        </member>
        <member name="M:AXAXL.DbEntity.Interfaces.IDatabaseDriver.ExecuteCommand(System.String,System.Boolean,System.String,System.ValueTuple{System.String,System.Object,System.Data.ParameterDirection}[],System.Collections.Generic.IDictionary{System.String,System.Object}@,System.Int32)">
            <summary>
            Execute sql command using values from <paramref name="parameters"/> as parameter value for sql command.
            </summary>
            <param name="connectionString">Database connection string</param>
            <param name="isStoredProcedure">true if command string is a stored procedure name</param>
            <param name="rawSqlCommand">Raw sql query</param>
            <param name="parameters">Array of value tuple which has parameter name, value and direction.</param>
            <param name="outputParameters">value returned for those paraeters marked as OUTPUT</param>
            <param name="timeoutDurationInSeconds">Timeout setting for this query.  Default is 30 seconds.</param>
            <returns>List of <see cref="T:System.Dynamic.ExpandoObject"/> of any resultset returned.</returns>
        </member>
        <member name="M:AXAXL.DbEntity.Interfaces.IDatabaseDriver.ExecuteCommand``1(System.String,AXAXL.DbEntity.EntityGraph.Node,System.Boolean,System.String,System.ValueTuple{System.String,System.Object,System.Data.ParameterDirection}[],System.Collections.Generic.IDictionary{System.String,System.Object}@,System.Int32)">
            <summary>
            Execute sql command using values from <paramref name="parameters"/> as parameter value for sql command.
            </summary>
            <typeparam name="T">Entity type used to store returned result set.</typeparam>
            <param name="connectionString">Database connection string</param>
            <param name="node">Node of <typeparamref name="T"/></param>
            <param name="isStoredProcedure">true if command string is a stored procedure name</param>
            <param name="rawSqlCommand">Raw sql query</param>
            <param name="parameters">Array of value tuple which has parameter name, value and direction.</param>
            <param name="outputParameters">value returned for those paraeters marked as OUTPUT</param>
            <param name="timeoutDurationInSeconds">Timeout setting for this query.  Default is 30 seconds.</param>
            <returns>Enumerable of <typeparamref name="T"/></returns>
        </member>
        <member name="M:AXAXL.DbEntity.Interfaces.IDatabaseDriver.GetSqlDbType(System.Type)">
            <summary>
            Return corresponding <see cref="T:System.Data.SqlDbType"/> for a C# object type.
            </summary>
            <param name="csType">C# object type</param>
            <returns><see cref="N:System.Data.SqlTypes"/></returns>
        </member>
        <member name="M:AXAXL.DbEntity.Interfaces.IDbService.Bootstrap(System.Reflection.Assembly[],System.String[])">
            <summary>
            Boostrap DbService where the servie will scan <paramref name="assemblies"/> for class type which has the a <see cref="T:System.ComponentModel.DataAnnotations.Schema.TableAttribute"/> defined.
            and create <see cref="T:AXAXL.DbEntity.EntityGraph.Node"/> to store the discovered meta data.
            if <paramref name="assemblies"/> is null or empty, then use all loaded assemblies as found in <see cref="P:System.AppDomain.CurrentDomain"/>.
            Use <paramref name="assemblyNamePrefixes"/> to narrow down the assembly to start by specifying the assembly name prefix.
            Service will use case insensitives match to test assembly by name with <see cref="M:System.String.StartsWith(System.String,System.StringComparison)"/>
            If <paramref name="assemblyNamePrefixes"/> is null or empty, service will search through all assemblies specified.
            </summary>
            <param name="assemblies">list of assemblies to scan.  If none, full assemblies loaded will be used. <see cref="P:System.AppDomain.CurrentDomain"/></param>
            <param name="assemblyNamePrefixes">Assembely name prefixes.</param>
            <returns></returns>
        </member>
        <member name="M:AXAXL.DbEntity.Interfaces.IDbService.Query``1">
            <summary>
            Obtain an instance of IQuery to execute query on entity of type <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">Entity class type</typeparam>
            <returns>Return itself for chaining method calls.</returns>
        </member>
        <member name="M:AXAXL.DbEntity.Interfaces.IDbService.Persist">
            <summary>
            Obtain an IPersist for saving entity objects as a unit.
            </summary>
            <returns>Return itself for chaining method calls.</returns>
        </member>
        <member name="T:AXAXL.DbEntity.Interfaces.IDbServiceOption">
            <summary>
            Server Option interface which define funcation to specify runtime database context such as connection string.
            </summary>
        </member>
        <member name="M:AXAXL.DbEntity.Interfaces.IDbServiceOption.AddOrUpdateConnection(System.String,System.String)">
            <summary>
            Assign or update a connection name with a connection string.
            </summary>
            <param name="connectionName">Name of connection</param>
            <param name="connectionString">Database connection string</param>
            <returns></returns>
        </member>
        <member name="M:AXAXL.DbEntity.Interfaces.IDbServiceOption.SetAsDefaultConnection(System.String)">
            <summary>
            Assign a connection name as a default.  Connection name is assigned to an entity object via <see cref="T:AXAXL.DbEntity.Annotation.ConnectionAttribute"/>.  If none is specified on an entity object,
            this default will be used.
            </summary>
            <param name="connectionName"></param>
            <returns></returns>
        </member>
        <member name="M:AXAXL.DbEntity.Interfaces.IDbServiceOption.GetDefaultConnectionString">
            <summary>
            Return default connection string.
            </summary>
            <returns></returns>
        </member>
        <member name="M:AXAXL.DbEntity.Interfaces.IDbServiceOption.GetConnectionString(System.String)">
            <summary>
            Return connection string by the specified connection name <paramref name="connectionName"/>.
            </summary>
            <param name="connectionName">Name for identifying a connection string as assigned in <see cref="M:AXAXL.DbEntity.Interfaces.IDbServiceOption.AddOrUpdateConnection(System.String,System.String)"/></param>
            <returns>Database connection string.</returns>
        </member>
        <member name="M:AXAXL.DbEntity.Interfaces.IDbServiceOption.SetRootDefaultTransactionScope(System.Transactions.TransactionScopeOption)">
            <summary>
            Assign the default root transaction scope for <see cref="T:AXAXL.DbEntity.Interfaces.IPersist"/>.  If this method is not used to setup default, RequiredNew will be used.
            </summary>
            <param name="scope">Transaction scope option.  See <see cref="T:System.Transactions.TransactionScopeOption"/></param>
            <returns>Return itself to enable method chaining.</returns>
        </member>
        <member name="M:AXAXL.DbEntity.Interfaces.IDbServiceOption.SetRootDefaultIsolation(System.Transactions.IsolationLevel)">
            <summary>
            Assign default isolation level for <see cref="T:AXAXL.DbEntity.Interfaces.IPersist"/>.  If this method is not called to setup default, ReadCommitted will be used.
            </summary>
            <param name="isolation">Isolation level. see <see cref="T:System.Transactions.IsolationLevel"/></param>
            <returns>Return itself to enable method chaining.</returns>
        </member>
        <member name="M:AXAXL.DbEntity.Interfaces.IExecuteCommand.SetStoredProcedure(System.String,System.String)">
            <summary>
            Assign the stored procedure name to this execution.
            </summary>
            <param name="storedProcedureName">stored procedure name</param>
            <param name="connectionName">connection name</param>
            <returns>self for method chaining.</returns>
        </member>
        <member name="M:AXAXL.DbEntity.Interfaces.IExecuteCommand.SetCommand(System.String,System.String)">
            <summary>
            Assign raw sql to this execution.
            </summary>
            <param name="command">Raw sql commands</param>
            <param name="connectionName">connection name</param>
            <returns>self for method chaining.</returns>
        </member>
        <member name="M:AXAXL.DbEntity.Interfaces.IExecuteCommand.SetParameters(System.ValueTuple{System.String,System.Object,System.Data.ParameterDirection}[])">
            <summary>
            Assign parameters as specified by the stored procedure or as code in the raw sql command.
            </summary>
            <param name="parameters">Array of value tuple.</param>
            <returns>self for method chaining.</returns>
        </member>
        <member name="M:AXAXL.DbEntity.Interfaces.IExecuteCommand.SetTransactionScopeOption(System.Transactions.TransactionScopeOption)">
            <summary>
            Assign transaction scope option to this execution.
            </summary>
            <param name="option"><see cref="T:System.Transactions.TransactionScopeOption"/></param>
            <returns>self for method chaining.</returns>
        </member>
        <member name="M:AXAXL.DbEntity.Interfaces.IExecuteCommand.SetIsolationLevel(System.Transactions.IsolationLevel)">
            <summary>
            Assign isolation level to this execution.
            </summary>
            <param name="isolationLevel"><see cref="T:System.Transactions.IsolationLevel"/></param>
            <returns>self for method chaining.</returns>
        </member>
        <member name="M:AXAXL.DbEntity.Interfaces.IExecuteCommand.SetTimeout(System.Int32)">
            <summary>
            Assign command timeout time.  If none is specified, default is 30 seconds,
            according to <![CDATA[https://docs.microsoft.com/en-us/dotnet/api/system.data.sqlclient.sqlcommand.commandtimeout?view=netcore-2.2.]]>
            </summary>
            <param name="timeoutDurationInSeconds">Timeout in seconds</param>
            <returns>Return itself for method call chaining.</returns>
        </member>
        <member name="M:AXAXL.DbEntity.Interfaces.IExecuteCommand.Execute(System.Collections.Generic.IDictionary{System.String,System.Object}@)">
            <summary>
            Execute the command or stored procedure assigned.
            </summary>
            <param name="parameters">
            Dictionary of output or returned parameters with their name and value.  
            Parameters as specified in <seealso cref="!:SetParameters((string Name, object Value, ParameterDirection Direction)[])"/>
            with direction being not <see cref="F:System.Data.ParameterDirection.Input"/> will be returned in this dictionary.
            </param>
            <returns>
            If the execute returns any data row, they will be returned as list of <see cref="T:System.Dynamic.ExpandoObject"/>.
            The column name in the data row returned will be the property names of the <see cref="T:System.Dynamic.ExpandoObject"/> object.
            </returns>
        </member>
        <member name="M:AXAXL.DbEntity.Interfaces.IExecuteCommand.Execute``1(System.Collections.Generic.IDictionary{System.String,System.Object}@)">
            <summary>
            Execute the command or stored procedure assigned.
            </summary>
            <typeparam name="T">Entity type being used to store result data.</typeparam>
            <param name="parameters">
            Dictionary of output or returned parameters with their name and value.  
            Parameters as specified in <seealso cref="!:SetParameters((string Name, object Value, ParameterDirection Direction)[])"/>
            with direction being not <see cref="F:System.Data.ParameterDirection.Input"/> will be returned in this dictionary.
            </param>
            <returns>IEnumerable of <typeparamref name="T"/></returns>
        </member>
        <member name="T:AXAXL.DbEntity.Interfaces.INodeMap">
            <summary>
            NodeMap contains all meta data with respect to object-relational mapping and parent-to-child relationship found among loaded or specified assemblies.
            Meta data of an entity class, identifiable by <see cref="T:System.ComponentModel.DataAnnotations.Schema.TableAttribute"/>, is stored as a Node.
            Meta data of an entity class property, identifiable by <see cref="T:System.ComponentModel.DataAnnotations.Schema.ColumnAttribute"/> is stored as a NodeProperty.
            Meta data of entity class relationship, such as references and primary-to-foreign key mapping, is stored as NodeEdge.
            </summary>
        </member>
        <member name="M:AXAXL.DbEntity.Interfaces.INodeMap.BuildNodes(System.Reflection.Assembly[],System.String[],System.String)">
            <summary>
            Build up meta data on entity objects found in <paramref name="assemblies"/> or all loaded assemblies as found in <see cref="P:System.AppDomain.CurrentDomain"/>
            if <paramref name="assemblies"/> is null or empty.
            Use <paramref name="assemblyNamePrefixes"/> to narrow down the assembly to start by specifying the assembly name prefix.
            Service will use case insensitives match to test assembly by name with <see cref="M:System.String.StartsWith(System.String,System.StringComparison)"/>
            If <paramref name="assemblyNamePrefixes"/> is null or empty, service will search through all assemblies specified.
            </summary>
            <param name="assemblies">Optional.  List of assemblies to search for meta data on entity class.</param>
            <param name="assemblyNamePrefixes">Name prefixes.</param>
            <param nane="filenameToDebugPrintMap">when set, print the full map built to a markdown file of this given location.</param>
        </member>
        <member name="M:AXAXL.DbEntity.Interfaces.INodeMap.ContainsNode(System.Type)">
            <summary>
            True if a <see cref="T:AXAXL.DbEntity.EntityGraph.Node"/> is found for the parameter <paramref name="type"/>.
            </summary>
            <param name="type">Type of entity class to lookup</param>
            <returns>True if <see cref="T:AXAXL.DbEntity.EntityGraph.Node"/> is found.</returns>
        </member>
        <member name="M:AXAXL.DbEntity.Interfaces.INodeMap.GetNode(System.Type)">
            <summary>
            Return a <see cref="T:AXAXL.DbEntity.EntityGraph.Node"/> of the requested <paramref name="type"/>.
            </summary>
            <param name="type">Entity class type</param>
            <returns>A <see cref="T:AXAXL.DbEntity.EntityGraph.Node"/> that represent the meta data on this entity class <paramref name="type"/></returns>
        </member>
        <member name="T:AXAXL.DbEntity.Interfaces.IPersist">
            <summary>
            This interface helps group different changes with respect to transaction scope option and isolation level into one transaction.
            </summary>
        </member>
        <member name="M:AXAXL.DbEntity.Interfaces.IPersist.Submit(System.Func{AXAXL.DbEntity.Interfaces.IChangeSet,AXAXL.DbEntity.Interfaces.IChangeSet})">
            <summary>
            Submit a change set.  No update to database yet.
            </summary>
            <param name="submitChangeSet">A change set</param>
            <returns>Returns itself for chaining method calls</returns>
        </member>
        <member name="M:AXAXL.DbEntity.Interfaces.IPersist.SetRootTransactionSCopeOption(System.Transactions.TransactionScopeOption)">
            <summary>
            Setup transaction scope option for the root transaction.  If none is specified by this method, transaction will be defaulted from <see cref="T:AXAXL.DbEntity.Interfaces.IDbServiceOption"/>.
            Change set will use this as default if none is specified.
            </summary>
            <param name="scopeOption">Transaction scope option</param>
            <returns>Returns itself for chaining method calls</returns>
        </member>
        <member name="M:AXAXL.DbEntity.Interfaces.IPersist.SetRootIsolationLevel(System.Transactions.IsolationLevel)">
            <summary>
            Setup root transaction isolation level. If none is specified by this method, isolation level will be defaulted from <see cref="T:AXAXL.DbEntity.Interfaces.IDbServiceOption"/>.
            Change set will use this as default if none is specified.
            </summary>
            <param name="isolation">Isolation level</param>
            <returns>Return itself for chaining method calls</returns>
        </member>
        <member name="M:AXAXL.DbEntity.Interfaces.IPersist.Commit">
            <summary>
            Commit all changes submitted so far into database, then follow by a transaction complete.
            </summary>
            <returns>No of record changes, including inserted, updated and deleted</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:AXAXL.DbEntity.Interfaces.IQuery`1.ToList(System.Int32)" -->
        <!-- Badly formed XML comment ignored for member "M:AXAXL.DbEntity.Interfaces.IQuery`1.ToArray(System.Int32)" -->
        <member name="M:AXAXL.DbEntity.Interfaces.IQuery`1.Where(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Specify the where clause of the query by a Lambda expression.
            </summary>
            <param name="whereClause">Lambda expresson that returns boolean.</param>
            <returns>Return itself for method call chaining.</returns>
        </member>
        <member name="M:AXAXL.DbEntity.Interfaces.IQuery`1.Where``2(System.Linq.Expressions.Expression{System.Func{``1,System.Boolean}})">
            <summary>
            Specify where clause for child set filtering
            </summary>
            <typeparam name="TParent">Parent entity type.  Together with <typeparamref name="TChild"/> type helps identify the parent-child relation that this where clause is going to filter</typeparam>
            <typeparam name="TChild">Child entity type.  Together with <typeparamref name="TParent"/> helps identify the parent-child relation that this where clause is going to filter</typeparam>
            <param name="whereClause">Lambda expresson that returns boolean.</param>
            <returns>Return itself for method call chaining.</returns>
        </member>
        <member name="M:AXAXL.DbEntity.Interfaces.IQuery`1.And(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Specify additional where clause.  This and the where clause from <see cref="M:AXAXL.DbEntity.Interfaces.IQuery`1.Where(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})"/>
            will be connected with an "AND" operator.
            </summary>
            <param name="whereClause">Lambda expression that returns boolean</param>
            <returns>Return itself for method call chaining.</returns>
        </member>
        <member name="M:AXAXL.DbEntity.Interfaces.IQuery`1.And``2(System.Linq.Expressions.Expression{System.Func{``1,System.Boolean}})">
            <summary>
            Specify where clause for child set filtering
            </summary>
            <typeparam name="TParent">Parent entity type.  Together with <typeparamref name="TChild"/> type helps identify the parent-child relation that this where clause is going to filter</typeparam>
            <typeparam name="TChild">Child entity type.  Together with <typeparamref name="TParent"/> helps identify the parent-child relation that this where clause is going to filter</typeparam>
            <param name="whereClause">Lambda expresson that returns boolean.</param>
            <returns>Return itself for method call chaining.</returns>
        </member>
        <member name="M:AXAXL.DbEntity.Interfaces.IQuery`1.Or(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}}[])">
            <summary>
            A group of conditions evaluated together by an "OR" operator.  This and other conditions supplied by
            <see cref="M:AXAXL.DbEntity.Interfaces.IQuery`1.Where(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})"/> and <see cref="M:AXAXL.DbEntity.Interfaces.IQuery`1.And(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})"/> will be evaluated together
            by "AND" sql operators.
            </summary>
            <param name="orClauses">a list of Lambda expressions which will return boolean</param>
            <returns>Return itself for method call chaining.</returns>
        </member>
        <member name="M:AXAXL.DbEntity.Interfaces.IQuery`1.Or``2(System.Linq.Expressions.Expression{System.Func{``1,System.Boolean}}[])">
            <summary>
            A group of conditions evaluated together by an "OR" operator.  This and other conditions supplied by
            <see cref="M:AXAXL.DbEntity.Interfaces.IQuery`1.Where(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})"/> and <see cref="M:AXAXL.DbEntity.Interfaces.IQuery`1.And(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})"/> will be evaluated together
            by "AND" sql operators.
            </summary>
            <typeparam name="TParent">Parent entity type.  Together with <typeparamref name="TChild"/> type helps identify the parent-child relation that this where clause is going to filter</typeparam>
            <typeparam name="TChild">Child entity type.  Together with <typeparamref name="TParent"/> helps identify the parent-child relation that this where clause is going to filter</typeparam>
            <param name="orClauses">a list of Lambda expressions which will return boolean</param>
            <returns>Return itself for method call chaining.</returns>
        </member>
        <member name="M:AXAXL.DbEntity.Interfaces.IQuery`1.Exclude(System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])">
            <summary>
            Excluding the childset by naming them in the Lambda expression.
            </summary>
            <param name="exclusions">Lambda expression identifying a childset reference on class type <typeparamref name="T"/></param>
            <returns>Return itself for method call chaining.</returns>
        </member>
        <member name="M:AXAXL.DbEntity.Interfaces.IQuery`1.OrderBy(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Boolean)">
            <summary>
            Order resultset according to the specified property and ordering
            </summary>
            <param name="property">Lambda expression that specify an entity property</param>
            <param name="isAscending">Order. Assume ascending</param>
            <returns>Return itself for method call chaining.</returns>
        </member>
        <member name="M:AXAXL.DbEntity.Interfaces.IQuery`1.SetTimeout(System.Int32)">
            <summary>
            Assign query timeout time.  If none is specified, default is 30 seconds,
            according to <![CDATA[https://docs.microsoft.com/en-us/dotnet/api/system.data.sqlclient.sqlcommand.commandtimeout?view=netcore-2.2.]]>
            </summary>
            <param name="timeoutDurationInSeconds">Timeout in seconds</param>
            <returns>Return itself for method call chaining.</returns>
        </member>
        <member name="M:AXAXL.DbEntity.Interfaces.IQuery`1.Exclude``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])">
            <summary>
            Excluding the childset by naming them in the Lambda expression.
            </summary>
            <typeparam name="TObject">Childset entity class type other than <typeparamref name="T"/></typeparam>
            <param name="exclusions">Lambda expression identifying a childset reference on class type <typeparamref name="TObject"/></param>
            <returns>Return itself for method call chaining.</returns>
        </member>
        <member name="T:AXAXL.DbEntity.Interfaces.IQueryExtensions">
            <summary>
            This class defines placeholding extensions that represents various SQL operatiors, such as IN or LIKE.  These extensions performs not logic but are used
            by the library to identify the respective SQL operators in a Lambda where clause.
            </summary>
        </member>
        <member name="F:AXAXL.DbEntity.MSSql.Autofac.MSSqlGeneratorResponseCache.C_MS_SQL_GENERATOR_CACHE_INTERCEPTOR_NAME">
            <summary>
            Name used in InterceptAttribute and AutofModule to relate Interceptor with the Service to be intercepted.
            See Autofac reference at <![CDATA[https://autofaccn.readthedocs.io/en/latest/advanced/interceptors.html#associate-interceptors-with-types-to-be-intercepted]]>
            </summary>
        </member>
        <member name="T:AXAXL.DbEntity.MSSql.Autofac.MSSqlGeneratorResponseCache.MethodSelectionHookForSQLGenCache">
            <summary>
            SubClass to determining which method will be intercepted.  Will use <see cref="F:AXAXL.DbEntity.MSSql.Autofac.MSSqlGeneratorResponseCache._methodResponseToBeCached"/> to determine which method to intercept.
            </summary>
        </member>
        <member name="F:AXAXL.DbEntity.MSSql.Autofac.MSSqlGeneratorResponseCache._methodResponseToBeCached">
            <summary>
            This map control which method will be intercepted and also provides the corresponding delegate to calculate the method signature of each invocation at runtime. 
            </summary>
        </member>
        <member name="M:AXAXL.DbEntity.MSSql.Autofac.MSSqlGeneratorResponseCache.Intercept(Castle.DynamicProxy.IInvocation)">
            <summary>
            Interceptor method.  Use <see cref="T:Castle.DynamicProxy.IInvocation"/> to determine method signature and parameter values at runtime.
            This method will check <see cref="F:AXAXL.DbEntity.MSSql.Autofac.MSSqlGeneratorResponseCache._methodResponseToBeCached"/> dictionary to get the delegate that calculate the method signature at runtime.
            The signature includes the method name and the runtime parameter value as strings.
            </summary>
            <param name="invocation">Method invocation data at runtime.</param>
        </member>
        <member name="M:AXAXL.DbEntity.MSSql.MSSqlDriver.RestoreWhereClause(AXAXL.DbEntity.EntityGraph.Node,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression},System.Type@)">
            <summary>
            Restore IEnumerable of Expression to IEnumerable of Expression&lt;Func&lt;T, bool&gt;&gt;.
            </summary>
            <param name="node">Type of this node will be the type of the delegate to be restored.</param>
            <param name="whereClauses">list of expression</param>
            <param name="restoredType">type of the original expression</param>
            <returns>Restored expression of the right type</returns>
        </member>
        <member name="M:AXAXL.DbEntity.MSSql.MSSqlDriver.RestoreOrClauses(AXAXL.DbEntity.EntityGraph.Node,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression[]},System.Type@)">
            <summary>
            Restore IEnumerable of Expression[] to IEnumerable of Expression&lt;Func&lt;T, bool&gt;&gt;[].
            </summary>
            <param name="node">Type of this node will be the type of the delegate to be restored.</param>
            <param name="orClauses">list of expression[]</param>
            <param name="restoredType">type of the original expression</param>
            <returns>Restored expression of the right type</returns>
        </member>
        <member name="M:AXAXL.DbEntity.MSSql.MSSqlDriver.MakeCompileWithRightType(AXAXL.DbEntity.EntityGraph.Node,System.Type,System.Type)">
            <summary>
            Construct delegate of <seealso cref="M:AXAXL.DbEntity.MSSql.MSSqlDriver.CompileConditions``1(AXAXL.DbEntity.EntityGraph.Node,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}}},System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}}[]},System.String,System.Collections.Specialized.OrderedDictionary)"/>
            with the right type for its generic type parameter.
            </summary>
            <param name="node">Node type will be used as the type parameter of the generic method <see cref="M:AXAXL.DbEntity.MSSql.MSSqlDriver.CompileConditions``1(AXAXL.DbEntity.EntityGraph.Node,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}}},System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}}[]},System.String,System.Collections.Specialized.OrderedDictionary)"/></param>
            <param name="whereClausesType">type of the where clauses</param>
            <param name="orClausesType">type of the or clauses</param>
            <returns>delegate to call the CompileConditions method</returns>
        </member>
        <member name="T:System.RowVersion">
            <summary>
            Custom value type for handling <see cref="F:System.Data.SqlDbType.Timestamp"/> which is a byte array. Although such Db type can be handled nicely by a regular c# byte array,
            serialization become tricky.  Having a custom value type would tie up custome handling nicely together.
            
            Idea drawn from 
            1. <![CDATA[https://entityframework.net/knowledge-base/31163205/rowversion-gets-mapped-to-byte-8--in-entityframe-work-but-when-manually-casting-it-s-byte-18-]]>
            2. <![CDATA[https://gist.github.com/jnm2/929d194c87df8ad0438f6cab0139a0a6]]>
            </summary>
        </member>
    </members>
</doc>
